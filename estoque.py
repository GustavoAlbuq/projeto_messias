# -*- coding: utf-8 -*-
"""Projeto_Sistema_de_Gerenciamento_de_Estoque

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q4IvGKYH5r9DglOrkPbpN-3OGg_Cq3Z2
"""

import sqlite3


# Conectar-se a um banco de dados SQLite existente ou criar um novo
conn = sqlite3.connect('mydatabase.db')
# Criar um cursor
cursor = conn.cursor()
# Criar a tabela 'estoque' se ela não existir
cursor.execute('''CREATE TABLE IF NOT EXISTS estoque (
    nome TEXT PRIMARY KEY,
    quantidade INT
)''')

def mostrar_estoque():
    cursor.execute('SELECT nome, quantidade FROM estoque')
    produtos = cursor.fetchall()

    if produtos:
        print("Produtos no estoque:")
        for produto in produtos:
            nome, quantidade = produto
            print(f"{nome}: {quantidade}")
    else:
        print("Nenhum produto no estoque.")

def adicionar_produto():
    nome = input("Digite o nome do produto: ")
    try:
        quantidade = float(input("Digite a quantidade a ser adicionada: "))
    except ValueError:
        print("Quantidade inválida. Certifique-se de digitar um número válido.")
        return

    # Verificar se o produto já existe na tabela
    cursor.execute('SELECT quantidade FROM estoque WHERE nome = ?', (nome,))
    row = cursor.fetchone()

    if row is not None:
        estoque_atual = row[0]
        estoque_atual += quantidade
        cursor.execute('UPDATE estoque SET quantidade = ? WHERE nome = ?', (estoque_atual, nome))
    else:
        cursor.execute('INSERT INTO estoque (nome, quantidade) VALUES (?, ?)', (nome, quantidade))

    conn.commit()
    print("Produto adicionado ao estoque com sucesso!")

def remover_produto():
    nome = input("Digite o nome do produto:")
    cursor.execute('SELECT quantidade FROM estoque WHERE nome = ?', (nome,))
    row = cursor.fetchone()

    if row is not None:
        quantidade_em_estoque = row[0]
        try:
            quantidade = float(input("Digite a quantidade a ser removida: "))
        except ValueError:
            print("Quantidade inválida. Certifique-se de digitar um número inteiro válido.")
            return

        if quantidade <= quantidade_em_estoque:
            quantidade_em_estoque -= quantidade
            cursor.execute('UPDATE estoque SET quantidade = ? WHERE nome = ?', (quantidade_em_estoque, nome))
            conn.commit()
            print("Produto removido do estoque com sucesso!")
        else:
            print("Quantidade insuficiente em estoque.")
    else:
        print("Produto não encontrado no estoque.")

def verificar_estoque():
    nome = input("Digite o nome do produto:")
    cursor.execute('SELECT quantidade FROM estoque WHERE nome = ?', (nome,))
    row = cursor.fetchone()

    if row is not None:
        quantidade_em_estoque = row[0]
        print(f"Quantidade em estoque de {nome}: {quantidade_em_estoque}")
    else:
        print("Produto não encontrado no estoque.")

def zerar_estoque():
    cursor.execute('DELETE FROM estoque')
    conn.commit()
    print("Estoque zerado com sucesso!")

# Antes do loop de opções, chamamos a função para mostrar o estoque
mostrar_estoque()

while True:
    print("\nOpções:")
    print("1. Adicionar produto ao estoque")
    print("2. Remover produto do estoque")
    print("3. Verificar estoque de um produto")
    print("4. Zerar o estoque")
    print("5. Sair")

    opcao = input("Escolha uma opção: ")

    if opcao.isdigit():
        opcao = int(opcao)
    else:
        print("Opção inválida. Insira um número de opção válido.")
        continue

    if opcao == 1:
        adicionar_produto()
    elif opcao == 2:
        remover_produto()
    elif opcao == 3:
        verificar_estoque()
    elif opcao == 4:
        zerar_estoque()
    elif opcao == 5:
        conn.close()
        break
    else:
        print("Opção inválida. Tente novamente.")